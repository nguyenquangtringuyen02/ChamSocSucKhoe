import Wallet from "../models/Wallet.js";
import User from "../models/User.js";
import crypto from "crypto";
import axios from "axios";
import mongoose from "mongoose";
import Payments from "../models/Payment.js";

const walletController = {
  getWallet: async (req, res) => {
    try {
      const { _id: userId } = req.user;

      let wallet = await Wallet.findOne({ userId });
      if (!wallet) wallet = await Wallet.create({ userId });

      return res.status(200).json({ wallet });
    } catch (error) {
      console.error("GET WALLET ERROR:", error.message);
      return res.status(500).json({ msg: "L·ªói khi l·∫•y v√≠ ng∆∞·ªùi d√πng" });
    }
  },
  getTransactions: async (req, res) => {
    try {
      const { _id: userId } = req.user;
      const wallet = await Wallet.findOne({ userId });

      if (!wallet) return res.status(404).json({ msg: "Kh√¥ng c√≥ v√≠" });

      return res
        .status(200)
        .json({ transactions: wallet.transactions.reverse() });
    } catch (error) {
      console.error("GET TX ERROR:", error.message);
      return res.status(500).json({ msg: "L·ªói khi l·∫•y giao d·ªãch" });
    }
  },
  makePayment: async (req, res) => {
    try {
      const { _id: userId } = req.user;
      const { amount, description } = req.body;

      if (!amount || amount <= 0) {
        return res.status(400).json({ msg: "S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá" });
      }

      const wallet = await Wallet.findOne({ userId });
      if (!wallet) {
        return res.status(404).json({ msg: "Kh√¥ng t√¨m th·∫•y v√≠ ng∆∞·ªùi d√πng" });
      }

      if (wallet.balance < amount) {
        return res.status(400).json({ msg: "S·ªë d∆∞ kh√¥ng ƒë·ªß" });
      }

      const transactionId = "PAY_" + new Date().getTime();

      // Tr·ª´ ti·ªÅn v√† t·∫°o giao d·ªãch m·ªõi
      wallet.balance -= amount;
      wallet.transactions.push({
        transactionId,
        type: "payment",
        amount,
        status: "success",
        description: description || "Thanh to√°n d·ªãch v·ª•",
      });

      await wallet.save();

      return res.status(200).json({
        msg: "Thanh to√°n th√†nh c√¥ng",
        transactionId,
        newBalance: wallet.balance,
      });
    } catch (error) {
      console.error("MAKE PAYMENT ERROR:", error.message);
      return res.status(500).json({ msg: "L·ªói khi thanh to√°n" });
    }
  },
  topUpWallet: async (req, res) => {
    try {
      const { _id: userId } = req.user;
      const { amount } = req.body;

      // Ki·ªÉm tra th√¥ng tin h·ª£p l·ªá
      if (!userId) {
        return res.status(400).json({ msg: "Kh√¥ng c√≥ ng∆∞·ªùi d√πng" });
      }

      if (!amount) {
        return res.status(400).json({ msg: "Kh√¥ng c√≥ s·ªë ti·ªÅn n√†o" });
      }

      // C√°c th√¥ng tin v·ªÅ thanh to√°n
      var accessKey = "F8BBA842ECF85";
      var secretKey = "K951B6PE1waDMi640xX08PD3vg6EkVlz";
      var orderInfo = `Payment for booking ${userId}`;
      var partnerCode = "MOMO";
      var redirectUrl = process.env.REDIRECT_URI || "https://www.facebook.com/"; // ƒê·ªãa ch·ªâ trang sau khi thanh to√°n
      var ipnUrl =
        "https://9464-171-225-184-232.ngrok-free.app/api/v1/wallet/callback"; //
      //  https://1382-103-156-58-116.ngrok-free.app Callback URL ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£ thanh to√°n
      var requestType = "captureWallet";
      var orderId = partnerCode + new Date().getTime();
      var requestId = orderId; // M·ªói y√™u c·∫ßu thanh to√°n s·∫Ω c√≥ m·ªôt ID duy nh·∫•t
      var extraData = userId.toString();
      var orderGroupId = "";
      var autoCapture = true;
      var lang = "vi";

      // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ t·∫°o signature (HMAC SHA256)
      var rawSignature = `accessKey=${accessKey}&amount=${amount}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${orderId}&orderInfo=${orderInfo}&partnerCode=${partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`;

      console.log("--------------------RAW SIGNATURE----------------");
      console.log(rawSignature);

      // T·∫°o signature
      var signature = crypto
        .createHmac("sha256", secretKey)
        .update(rawSignature)
        .digest("hex");

      console.log("--------------------SIGNATURE----------------");
      console.log(signature);

      // T·∫°o y√™u c·∫ßu g·ª≠i ƒë·∫øn MoMo
      const requestBody = {
        partnerCode,
        partnerName: "Test",
        storeId: "MomoTestStore",
        requestId,
        amount,
        orderId,
        orderInfo,
        redirectUrl,
        ipnUrl,
        lang,
        requestType,
        autoCapture,
        extraData,
        orderGroupId,
        signature,
      };

      const options = {
        method: "POST",
        url: "https://test-payment.momo.vn/v2/gateway/api/create",
        headers: {
          "Content-Type": "application/json",
        },
        data: requestBody,
      };

      let response = await axios(options);
      console.log("MOMO RESPONSE:", response.data);

      return res.status(200).json({
        response: response.data,
        msg: "Payment initiated successfully",
      });
    } catch (error) {
      console.error("MOMO ERROR:", error.response?.data || error.message);
      return res.status(500).json({
        statusCode: 500,
        msg: "Server error",
      });
    }
  },

  walletCallback: async (req, res) => {
    try {
      console.log("üì• MoMo callback received:", req.body);
      const { resultCode, amount, extraData } = req.body;

      if (resultCode === 0) {
        const userId = new mongoose.Types.ObjectId(String(extraData));

        const wallet = await Wallet.findOne({ userId });
        if (!wallet) {
          return res.status(402).json({ msg: "Kh√¥ng t√¨m th·∫•y v√≠ ng∆∞·ªùi d√πng" });
        }

        // C·ªông ti·ªÅn v√†o v√≠
        wallet.balance += Number(amount);
        wallet.transactions.push({
          type: "MOMO",
          amount: amount,
          description: "N·∫°p ti·ªÅn v√†o v√≠ qua MOMO th√†nh c√¥ng!"
        });

        await wallet.save();

        return res.status(200).json({ msg: "N·∫°p ti·ªÅn th√†nh c√¥ng", wallet });
      } else {
        return res.status(400).json({ msg: "Thanh to√°n th·∫•t b·∫°i t·ª´ MoMo" });
      }
    } catch (error) {
      console.error("Callback error:", error);
      return res.status(500).json({ msg: "L·ªói server callback" });
    }
  },

  getTransactions: async (req, res) => {
    try {
      const { userId } = req.params;
      const wallet = await Wallet.findOne({ userId });

      if (!wallet) {
        return res.status(404).json({ msg: "Kh√¥ng t√¨m th·∫•y v√≠ ng∆∞·ªùi d√πng" });
      }

      return res.status(200).json({ transactions: wallet.transactions.reverse() });
    } catch (error) {

    }
  }
};
export default walletController;
